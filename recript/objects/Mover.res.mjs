// Generated by ReScript, PLEASE EDIT WITH CARE

import * as P5 from "../bindings/P5.res.mjs";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";

function make(x, y, vel, mass, damping) {
  var position = new p5.Vector(x, y);
  var velocity = vel !== undefined ? vel : new p5.Vector(0.0, 0.0);
  var acceleration = new p5.Vector(undefined, undefined);
  return {
          position: position,
          velocity: velocity,
          acceleration: acceleration,
          mass: mass,
          damping: damping
        };
}

function getPosition(mover) {
  return mover.position;
}

function getVelocity(mover) {
  return mover.velocity;
}

function getMass(mover) {
  var mass = mover.mass;
  if (mass !== undefined) {
    return mass;
  } else {
    return 0.0;
  }
}

function _applyDamping(mover) {
  var damping = mover.damping;
  if (damping !== undefined) {
    mover.velocity.x = mover.velocity.x * damping;
    mover.velocity.y = mover.velocity.y * damping;
  }
  return mover;
}

function _applyVelocityLimit(mover, limit) {
  if (limit !== undefined) {
    mover.velocity.limit(limit);
  }
  return mover;
}

function _addAccToVel(mover) {
  mover.velocity.add(mover.acceleration);
  return mover;
}

function _addVelToPos(mover) {
  mover.position.add(mover.velocity);
  return mover;
}

function _resetAcc(mover) {
  mover.acceleration.mult(new p5.Vector(0.0, 0.0));
  return mover;
}

function update(mover, limit) {
  return _resetAcc(_applyVelocityLimit(_applyDamping(_addAccToVel(mover)), limit));
}

function applyForce(mover, force) {
  var acceleration = mover.acceleration;
  var v = mover.mass;
  if (v !== undefined) {
    if (v !== 0.0) {
      acceleration.add(P5.Vector.staticDivide(force, {
                TAG: "Float",
                _0: v
              }));
    } else {
      acceleration.add(P5.Vector.staticDivide(force, {
                TAG: "Float",
                _0: 1.0
              }));
    }
  } else {
    acceleration.add(force);
  }
  var newrecord = Caml_obj.obj_dup(mover);
  newrecord.acceleration = acceleration;
  return newrecord;
}

function attract(mover, moverToAttract, p, gravity) {
  var force = Vector.sub(mover.position, moverToAttract.position);
  var distance = force.mag();
  var distance$1 = p.constrain(distance, 5.0, 25.0);
  var force$1 = force.normalize();
  var strengh = gravity * getMass(mover) / (distance$1 * distance$1);
  return Vector.mult(force$1, strengh);
}

var Vector;

export {
  Vector ,
  make ,
  getPosition ,
  getVelocity ,
  getMass ,
  _applyDamping ,
  _applyVelocityLimit ,
  _addAccToVel ,
  _addVelToPos ,
  _resetAcc ,
  update ,
  applyForce ,
  attract ,
}
/* No side effect */
